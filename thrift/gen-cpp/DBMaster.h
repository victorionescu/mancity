/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DBMaster_H
#define DBMaster_H

#include <thrift/TDispatchProcessor.h>
#include "mancity_types.h"

namespace mancity {

class DBMasterIf {
 public:
  virtual ~DBMasterIf() {}
  virtual void ping() = 0;
  virtual void allTeams(TeamList& _return) = 0;
  virtual void teamPlayers(PlayerList& _return, const int32_t team_id) = 0;
  virtual void playerAttributes(PlayerAttributes& _return, const int32_t team_id, const int32_t player_id) = 0;
};

class DBMasterIfFactory {
 public:
  typedef DBMasterIf Handler;

  virtual ~DBMasterIfFactory() {}

  virtual DBMasterIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DBMasterIf* /* handler */) = 0;
};

class DBMasterIfSingletonFactory : virtual public DBMasterIfFactory {
 public:
  DBMasterIfSingletonFactory(const boost::shared_ptr<DBMasterIf>& iface) : iface_(iface) {}
  virtual ~DBMasterIfSingletonFactory() {}

  virtual DBMasterIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DBMasterIf* /* handler */) {}

 protected:
  boost::shared_ptr<DBMasterIf> iface_;
};

class DBMasterNull : virtual public DBMasterIf {
 public:
  virtual ~DBMasterNull() {}
  void ping() {
    return;
  }
  void allTeams(TeamList& /* _return */) {
    return;
  }
  void teamPlayers(PlayerList& /* _return */, const int32_t /* team_id */) {
    return;
  }
  void playerAttributes(PlayerAttributes& /* _return */, const int32_t /* team_id */, const int32_t /* player_id */) {
    return;
  }
};


class DBMaster_ping_args {
 public:

  DBMaster_ping_args() {
  }

  virtual ~DBMaster_ping_args() throw() {}


  bool operator == (const DBMaster_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DBMaster_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBMaster_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBMaster_ping_pargs {
 public:


  virtual ~DBMaster_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBMaster_ping_result {
 public:

  DBMaster_ping_result() {
  }

  virtual ~DBMaster_ping_result() throw() {}


  bool operator == (const DBMaster_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DBMaster_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBMaster_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBMaster_ping_presult {
 public:


  virtual ~DBMaster_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DBMaster_allTeams_args {
 public:

  DBMaster_allTeams_args() {
  }

  virtual ~DBMaster_allTeams_args() throw() {}


  bool operator == (const DBMaster_allTeams_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DBMaster_allTeams_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBMaster_allTeams_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBMaster_allTeams_pargs {
 public:


  virtual ~DBMaster_allTeams_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBMaster_allTeams_result__isset {
  _DBMaster_allTeams_result__isset() : success(false) {}
  bool success;
} _DBMaster_allTeams_result__isset;

class DBMaster_allTeams_result {
 public:

  DBMaster_allTeams_result() {
  }

  virtual ~DBMaster_allTeams_result() throw() {}

  TeamList success;

  _DBMaster_allTeams_result__isset __isset;

  void __set_success(const TeamList& val) {
    success = val;
  }

  bool operator == (const DBMaster_allTeams_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBMaster_allTeams_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBMaster_allTeams_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBMaster_allTeams_presult__isset {
  _DBMaster_allTeams_presult__isset() : success(false) {}
  bool success;
} _DBMaster_allTeams_presult__isset;

class DBMaster_allTeams_presult {
 public:


  virtual ~DBMaster_allTeams_presult() throw() {}

  TeamList* success;

  _DBMaster_allTeams_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DBMaster_teamPlayers_args__isset {
  _DBMaster_teamPlayers_args__isset() : team_id(false) {}
  bool team_id;
} _DBMaster_teamPlayers_args__isset;

class DBMaster_teamPlayers_args {
 public:

  DBMaster_teamPlayers_args() : team_id(0) {
  }

  virtual ~DBMaster_teamPlayers_args() throw() {}

  int32_t team_id;

  _DBMaster_teamPlayers_args__isset __isset;

  void __set_team_id(const int32_t val) {
    team_id = val;
  }

  bool operator == (const DBMaster_teamPlayers_args & rhs) const
  {
    if (!(team_id == rhs.team_id))
      return false;
    return true;
  }
  bool operator != (const DBMaster_teamPlayers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBMaster_teamPlayers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBMaster_teamPlayers_pargs {
 public:


  virtual ~DBMaster_teamPlayers_pargs() throw() {}

  const int32_t* team_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBMaster_teamPlayers_result__isset {
  _DBMaster_teamPlayers_result__isset() : success(false) {}
  bool success;
} _DBMaster_teamPlayers_result__isset;

class DBMaster_teamPlayers_result {
 public:

  DBMaster_teamPlayers_result() {
  }

  virtual ~DBMaster_teamPlayers_result() throw() {}

  PlayerList success;

  _DBMaster_teamPlayers_result__isset __isset;

  void __set_success(const PlayerList& val) {
    success = val;
  }

  bool operator == (const DBMaster_teamPlayers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBMaster_teamPlayers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBMaster_teamPlayers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBMaster_teamPlayers_presult__isset {
  _DBMaster_teamPlayers_presult__isset() : success(false) {}
  bool success;
} _DBMaster_teamPlayers_presult__isset;

class DBMaster_teamPlayers_presult {
 public:


  virtual ~DBMaster_teamPlayers_presult() throw() {}

  PlayerList* success;

  _DBMaster_teamPlayers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DBMaster_playerAttributes_args__isset {
  _DBMaster_playerAttributes_args__isset() : team_id(false), player_id(false) {}
  bool team_id;
  bool player_id;
} _DBMaster_playerAttributes_args__isset;

class DBMaster_playerAttributes_args {
 public:

  DBMaster_playerAttributes_args() : team_id(0), player_id(0) {
  }

  virtual ~DBMaster_playerAttributes_args() throw() {}

  int32_t team_id;
  int32_t player_id;

  _DBMaster_playerAttributes_args__isset __isset;

  void __set_team_id(const int32_t val) {
    team_id = val;
  }

  void __set_player_id(const int32_t val) {
    player_id = val;
  }

  bool operator == (const DBMaster_playerAttributes_args & rhs) const
  {
    if (!(team_id == rhs.team_id))
      return false;
    if (!(player_id == rhs.player_id))
      return false;
    return true;
  }
  bool operator != (const DBMaster_playerAttributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBMaster_playerAttributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBMaster_playerAttributes_pargs {
 public:


  virtual ~DBMaster_playerAttributes_pargs() throw() {}

  const int32_t* team_id;
  const int32_t* player_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBMaster_playerAttributes_result__isset {
  _DBMaster_playerAttributes_result__isset() : success(false) {}
  bool success;
} _DBMaster_playerAttributes_result__isset;

class DBMaster_playerAttributes_result {
 public:

  DBMaster_playerAttributes_result() {
  }

  virtual ~DBMaster_playerAttributes_result() throw() {}

  PlayerAttributes success;

  _DBMaster_playerAttributes_result__isset __isset;

  void __set_success(const PlayerAttributes& val) {
    success = val;
  }

  bool operator == (const DBMaster_playerAttributes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBMaster_playerAttributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBMaster_playerAttributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBMaster_playerAttributes_presult__isset {
  _DBMaster_playerAttributes_presult__isset() : success(false) {}
  bool success;
} _DBMaster_playerAttributes_presult__isset;

class DBMaster_playerAttributes_presult {
 public:


  virtual ~DBMaster_playerAttributes_presult() throw() {}

  PlayerAttributes* success;

  _DBMaster_playerAttributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DBMasterClient : virtual public DBMasterIf {
 public:
  DBMasterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DBMasterClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void allTeams(TeamList& _return);
  void send_allTeams();
  void recv_allTeams(TeamList& _return);
  void teamPlayers(PlayerList& _return, const int32_t team_id);
  void send_teamPlayers(const int32_t team_id);
  void recv_teamPlayers(PlayerList& _return);
  void playerAttributes(PlayerAttributes& _return, const int32_t team_id, const int32_t player_id);
  void send_playerAttributes(const int32_t team_id, const int32_t player_id);
  void recv_playerAttributes(PlayerAttributes& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DBMasterProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DBMasterIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DBMasterProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_allTeams(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_teamPlayers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_playerAttributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DBMasterProcessor(boost::shared_ptr<DBMasterIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &DBMasterProcessor::process_ping;
    processMap_["allTeams"] = &DBMasterProcessor::process_allTeams;
    processMap_["teamPlayers"] = &DBMasterProcessor::process_teamPlayers;
    processMap_["playerAttributes"] = &DBMasterProcessor::process_playerAttributes;
  }

  virtual ~DBMasterProcessor() {}
};

class DBMasterProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DBMasterProcessorFactory(const ::boost::shared_ptr< DBMasterIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DBMasterIfFactory > handlerFactory_;
};

class DBMasterMultiface : virtual public DBMasterIf {
 public:
  DBMasterMultiface(std::vector<boost::shared_ptr<DBMasterIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DBMasterMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DBMasterIf> > ifaces_;
  DBMasterMultiface() {}
  void add(boost::shared_ptr<DBMasterIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void allTeams(TeamList& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->allTeams(_return);
    }
    ifaces_[i]->allTeams(_return);
    return;
  }

  void teamPlayers(PlayerList& _return, const int32_t team_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->teamPlayers(_return, team_id);
    }
    ifaces_[i]->teamPlayers(_return, team_id);
    return;
  }

  void playerAttributes(PlayerAttributes& _return, const int32_t team_id, const int32_t player_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->playerAttributes(_return, team_id, player_id);
    }
    ifaces_[i]->playerAttributes(_return, team_id, player_id);
    return;
  }

};

} // namespace

#endif
