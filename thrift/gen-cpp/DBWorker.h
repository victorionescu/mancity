/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DBWorker_H
#define DBWorker_H

#include <thrift/TDispatchProcessor.h>
#include "mancity_types.h"

namespace mancity {

class DBWorkerIf {
 public:
  virtual ~DBWorkerIf() {}
  virtual void ping() = 0;
  virtual void getAllMatches(MatchList& _return) = 0;
  virtual void getMatch(Match& _return, const int32_t matchId) = 0;
  virtual void getTeamName(std::string& _return, const int32_t teamId) = 0;
  virtual void getTeamPlayers(PlayerList& _return, const int32_t teamId) = 0;
  virtual void getMatchEvents(EventList& _return, const int32_t matchId, const PlayerIdList& playerIdList, const EventTypeList& eventTypeList) = 0;
};

class DBWorkerIfFactory {
 public:
  typedef DBWorkerIf Handler;

  virtual ~DBWorkerIfFactory() {}

  virtual DBWorkerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DBWorkerIf* /* handler */) = 0;
};

class DBWorkerIfSingletonFactory : virtual public DBWorkerIfFactory {
 public:
  DBWorkerIfSingletonFactory(const boost::shared_ptr<DBWorkerIf>& iface) : iface_(iface) {}
  virtual ~DBWorkerIfSingletonFactory() {}

  virtual DBWorkerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DBWorkerIf* /* handler */) {}

 protected:
  boost::shared_ptr<DBWorkerIf> iface_;
};

class DBWorkerNull : virtual public DBWorkerIf {
 public:
  virtual ~DBWorkerNull() {}
  void ping() {
    return;
  }
  void getAllMatches(MatchList& /* _return */) {
    return;
  }
  void getMatch(Match& /* _return */, const int32_t /* matchId */) {
    return;
  }
  void getTeamName(std::string& /* _return */, const int32_t /* teamId */) {
    return;
  }
  void getTeamPlayers(PlayerList& /* _return */, const int32_t /* teamId */) {
    return;
  }
  void getMatchEvents(EventList& /* _return */, const int32_t /* matchId */, const PlayerIdList& /* playerIdList */, const EventTypeList& /* eventTypeList */) {
    return;
  }
};


class DBWorker_ping_args {
 public:

  DBWorker_ping_args() {
  }

  virtual ~DBWorker_ping_args() throw() {}


  bool operator == (const DBWorker_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DBWorker_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBWorker_ping_pargs {
 public:


  virtual ~DBWorker_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBWorker_ping_result {
 public:

  DBWorker_ping_result() {
  }

  virtual ~DBWorker_ping_result() throw() {}


  bool operator == (const DBWorker_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DBWorker_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBWorker_ping_presult {
 public:


  virtual ~DBWorker_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DBWorker_getAllMatches_args {
 public:

  DBWorker_getAllMatches_args() {
  }

  virtual ~DBWorker_getAllMatches_args() throw() {}


  bool operator == (const DBWorker_getAllMatches_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DBWorker_getAllMatches_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_getAllMatches_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBWorker_getAllMatches_pargs {
 public:


  virtual ~DBWorker_getAllMatches_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBWorker_getAllMatches_result__isset {
  _DBWorker_getAllMatches_result__isset() : success(false) {}
  bool success;
} _DBWorker_getAllMatches_result__isset;

class DBWorker_getAllMatches_result {
 public:

  DBWorker_getAllMatches_result() {
  }

  virtual ~DBWorker_getAllMatches_result() throw() {}

  MatchList success;

  _DBWorker_getAllMatches_result__isset __isset;

  void __set_success(const MatchList& val) {
    success = val;
  }

  bool operator == (const DBWorker_getAllMatches_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBWorker_getAllMatches_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_getAllMatches_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBWorker_getAllMatches_presult__isset {
  _DBWorker_getAllMatches_presult__isset() : success(false) {}
  bool success;
} _DBWorker_getAllMatches_presult__isset;

class DBWorker_getAllMatches_presult {
 public:


  virtual ~DBWorker_getAllMatches_presult() throw() {}

  MatchList* success;

  _DBWorker_getAllMatches_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DBWorker_getMatch_args__isset {
  _DBWorker_getMatch_args__isset() : matchId(false) {}
  bool matchId;
} _DBWorker_getMatch_args__isset;

class DBWorker_getMatch_args {
 public:

  DBWorker_getMatch_args() : matchId(0) {
  }

  virtual ~DBWorker_getMatch_args() throw() {}

  int32_t matchId;

  _DBWorker_getMatch_args__isset __isset;

  void __set_matchId(const int32_t val) {
    matchId = val;
  }

  bool operator == (const DBWorker_getMatch_args & rhs) const
  {
    if (!(matchId == rhs.matchId))
      return false;
    return true;
  }
  bool operator != (const DBWorker_getMatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_getMatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBWorker_getMatch_pargs {
 public:


  virtual ~DBWorker_getMatch_pargs() throw() {}

  const int32_t* matchId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBWorker_getMatch_result__isset {
  _DBWorker_getMatch_result__isset() : success(false) {}
  bool success;
} _DBWorker_getMatch_result__isset;

class DBWorker_getMatch_result {
 public:

  DBWorker_getMatch_result() {
  }

  virtual ~DBWorker_getMatch_result() throw() {}

  Match success;

  _DBWorker_getMatch_result__isset __isset;

  void __set_success(const Match& val) {
    success = val;
  }

  bool operator == (const DBWorker_getMatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBWorker_getMatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_getMatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBWorker_getMatch_presult__isset {
  _DBWorker_getMatch_presult__isset() : success(false) {}
  bool success;
} _DBWorker_getMatch_presult__isset;

class DBWorker_getMatch_presult {
 public:


  virtual ~DBWorker_getMatch_presult() throw() {}

  Match* success;

  _DBWorker_getMatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DBWorker_getTeamName_args__isset {
  _DBWorker_getTeamName_args__isset() : teamId(false) {}
  bool teamId;
} _DBWorker_getTeamName_args__isset;

class DBWorker_getTeamName_args {
 public:

  DBWorker_getTeamName_args() : teamId(0) {
  }

  virtual ~DBWorker_getTeamName_args() throw() {}

  int32_t teamId;

  _DBWorker_getTeamName_args__isset __isset;

  void __set_teamId(const int32_t val) {
    teamId = val;
  }

  bool operator == (const DBWorker_getTeamName_args & rhs) const
  {
    if (!(teamId == rhs.teamId))
      return false;
    return true;
  }
  bool operator != (const DBWorker_getTeamName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_getTeamName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBWorker_getTeamName_pargs {
 public:


  virtual ~DBWorker_getTeamName_pargs() throw() {}

  const int32_t* teamId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBWorker_getTeamName_result__isset {
  _DBWorker_getTeamName_result__isset() : success(false) {}
  bool success;
} _DBWorker_getTeamName_result__isset;

class DBWorker_getTeamName_result {
 public:

  DBWorker_getTeamName_result() : success() {
  }

  virtual ~DBWorker_getTeamName_result() throw() {}

  std::string success;

  _DBWorker_getTeamName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DBWorker_getTeamName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBWorker_getTeamName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_getTeamName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBWorker_getTeamName_presult__isset {
  _DBWorker_getTeamName_presult__isset() : success(false) {}
  bool success;
} _DBWorker_getTeamName_presult__isset;

class DBWorker_getTeamName_presult {
 public:


  virtual ~DBWorker_getTeamName_presult() throw() {}

  std::string* success;

  _DBWorker_getTeamName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DBWorker_getTeamPlayers_args__isset {
  _DBWorker_getTeamPlayers_args__isset() : teamId(false) {}
  bool teamId;
} _DBWorker_getTeamPlayers_args__isset;

class DBWorker_getTeamPlayers_args {
 public:

  DBWorker_getTeamPlayers_args() : teamId(0) {
  }

  virtual ~DBWorker_getTeamPlayers_args() throw() {}

  int32_t teamId;

  _DBWorker_getTeamPlayers_args__isset __isset;

  void __set_teamId(const int32_t val) {
    teamId = val;
  }

  bool operator == (const DBWorker_getTeamPlayers_args & rhs) const
  {
    if (!(teamId == rhs.teamId))
      return false;
    return true;
  }
  bool operator != (const DBWorker_getTeamPlayers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_getTeamPlayers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBWorker_getTeamPlayers_pargs {
 public:


  virtual ~DBWorker_getTeamPlayers_pargs() throw() {}

  const int32_t* teamId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBWorker_getTeamPlayers_result__isset {
  _DBWorker_getTeamPlayers_result__isset() : success(false) {}
  bool success;
} _DBWorker_getTeamPlayers_result__isset;

class DBWorker_getTeamPlayers_result {
 public:

  DBWorker_getTeamPlayers_result() {
  }

  virtual ~DBWorker_getTeamPlayers_result() throw() {}

  PlayerList success;

  _DBWorker_getTeamPlayers_result__isset __isset;

  void __set_success(const PlayerList& val) {
    success = val;
  }

  bool operator == (const DBWorker_getTeamPlayers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBWorker_getTeamPlayers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_getTeamPlayers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBWorker_getTeamPlayers_presult__isset {
  _DBWorker_getTeamPlayers_presult__isset() : success(false) {}
  bool success;
} _DBWorker_getTeamPlayers_presult__isset;

class DBWorker_getTeamPlayers_presult {
 public:


  virtual ~DBWorker_getTeamPlayers_presult() throw() {}

  PlayerList* success;

  _DBWorker_getTeamPlayers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DBWorker_getMatchEvents_args__isset {
  _DBWorker_getMatchEvents_args__isset() : matchId(false), playerIdList(false), eventTypeList(false) {}
  bool matchId;
  bool playerIdList;
  bool eventTypeList;
} _DBWorker_getMatchEvents_args__isset;

class DBWorker_getMatchEvents_args {
 public:

  DBWorker_getMatchEvents_args() : matchId(0) {
  }

  virtual ~DBWorker_getMatchEvents_args() throw() {}

  int32_t matchId;
  PlayerIdList playerIdList;
  EventTypeList eventTypeList;

  _DBWorker_getMatchEvents_args__isset __isset;

  void __set_matchId(const int32_t val) {
    matchId = val;
  }

  void __set_playerIdList(const PlayerIdList& val) {
    playerIdList = val;
  }

  void __set_eventTypeList(const EventTypeList& val) {
    eventTypeList = val;
  }

  bool operator == (const DBWorker_getMatchEvents_args & rhs) const
  {
    if (!(matchId == rhs.matchId))
      return false;
    if (!(playerIdList == rhs.playerIdList))
      return false;
    if (!(eventTypeList == rhs.eventTypeList))
      return false;
    return true;
  }
  bool operator != (const DBWorker_getMatchEvents_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_getMatchEvents_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBWorker_getMatchEvents_pargs {
 public:


  virtual ~DBWorker_getMatchEvents_pargs() throw() {}

  const int32_t* matchId;
  const PlayerIdList* playerIdList;
  const EventTypeList* eventTypeList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBWorker_getMatchEvents_result__isset {
  _DBWorker_getMatchEvents_result__isset() : success(false) {}
  bool success;
} _DBWorker_getMatchEvents_result__isset;

class DBWorker_getMatchEvents_result {
 public:

  DBWorker_getMatchEvents_result() {
  }

  virtual ~DBWorker_getMatchEvents_result() throw() {}

  EventList success;

  _DBWorker_getMatchEvents_result__isset __isset;

  void __set_success(const EventList& val) {
    success = val;
  }

  bool operator == (const DBWorker_getMatchEvents_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBWorker_getMatchEvents_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_getMatchEvents_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBWorker_getMatchEvents_presult__isset {
  _DBWorker_getMatchEvents_presult__isset() : success(false) {}
  bool success;
} _DBWorker_getMatchEvents_presult__isset;

class DBWorker_getMatchEvents_presult {
 public:


  virtual ~DBWorker_getMatchEvents_presult() throw() {}

  EventList* success;

  _DBWorker_getMatchEvents_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DBWorkerClient : virtual public DBWorkerIf {
 public:
  DBWorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DBWorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void getAllMatches(MatchList& _return);
  void send_getAllMatches();
  void recv_getAllMatches(MatchList& _return);
  void getMatch(Match& _return, const int32_t matchId);
  void send_getMatch(const int32_t matchId);
  void recv_getMatch(Match& _return);
  void getTeamName(std::string& _return, const int32_t teamId);
  void send_getTeamName(const int32_t teamId);
  void recv_getTeamName(std::string& _return);
  void getTeamPlayers(PlayerList& _return, const int32_t teamId);
  void send_getTeamPlayers(const int32_t teamId);
  void recv_getTeamPlayers(PlayerList& _return);
  void getMatchEvents(EventList& _return, const int32_t matchId, const PlayerIdList& playerIdList, const EventTypeList& eventTypeList);
  void send_getMatchEvents(const int32_t matchId, const PlayerIdList& playerIdList, const EventTypeList& eventTypeList);
  void recv_getMatchEvents(EventList& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DBWorkerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DBWorkerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DBWorkerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllMatches(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTeamName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTeamPlayers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMatchEvents(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DBWorkerProcessor(boost::shared_ptr<DBWorkerIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &DBWorkerProcessor::process_ping;
    processMap_["getAllMatches"] = &DBWorkerProcessor::process_getAllMatches;
    processMap_["getMatch"] = &DBWorkerProcessor::process_getMatch;
    processMap_["getTeamName"] = &DBWorkerProcessor::process_getTeamName;
    processMap_["getTeamPlayers"] = &DBWorkerProcessor::process_getTeamPlayers;
    processMap_["getMatchEvents"] = &DBWorkerProcessor::process_getMatchEvents;
  }

  virtual ~DBWorkerProcessor() {}
};

class DBWorkerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DBWorkerProcessorFactory(const ::boost::shared_ptr< DBWorkerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DBWorkerIfFactory > handlerFactory_;
};

class DBWorkerMultiface : virtual public DBWorkerIf {
 public:
  DBWorkerMultiface(std::vector<boost::shared_ptr<DBWorkerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DBWorkerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DBWorkerIf> > ifaces_;
  DBWorkerMultiface() {}
  void add(boost::shared_ptr<DBWorkerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void getAllMatches(MatchList& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllMatches(_return);
    }
    ifaces_[i]->getAllMatches(_return);
    return;
  }

  void getMatch(Match& _return, const int32_t matchId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMatch(_return, matchId);
    }
    ifaces_[i]->getMatch(_return, matchId);
    return;
  }

  void getTeamName(std::string& _return, const int32_t teamId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTeamName(_return, teamId);
    }
    ifaces_[i]->getTeamName(_return, teamId);
    return;
  }

  void getTeamPlayers(PlayerList& _return, const int32_t teamId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTeamPlayers(_return, teamId);
    }
    ifaces_[i]->getTeamPlayers(_return, teamId);
    return;
  }

  void getMatchEvents(EventList& _return, const int32_t matchId, const PlayerIdList& playerIdList, const EventTypeList& eventTypeList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMatchEvents(_return, matchId, playerIdList, eventTypeList);
    }
    ifaces_[i]->getMatchEvents(_return, matchId, playerIdList, eventTypeList);
    return;
  }

};

} // namespace

#endif
