/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DBWorker_H
#define DBWorker_H

#include <thrift/TDispatchProcessor.h>
#include "mancity_types.h"

namespace mancity {

class DBWorkerIf {
 public:
  virtual ~DBWorkerIf() {}
  virtual void ping() = 0;
  virtual void allTeams(TeamList& _return) = 0;
};

class DBWorkerIfFactory {
 public:
  typedef DBWorkerIf Handler;

  virtual ~DBWorkerIfFactory() {}

  virtual DBWorkerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DBWorkerIf* /* handler */) = 0;
};

class DBWorkerIfSingletonFactory : virtual public DBWorkerIfFactory {
 public:
  DBWorkerIfSingletonFactory(const boost::shared_ptr<DBWorkerIf>& iface) : iface_(iface) {}
  virtual ~DBWorkerIfSingletonFactory() {}

  virtual DBWorkerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DBWorkerIf* /* handler */) {}

 protected:
  boost::shared_ptr<DBWorkerIf> iface_;
};

class DBWorkerNull : virtual public DBWorkerIf {
 public:
  virtual ~DBWorkerNull() {}
  void ping() {
    return;
  }
  void allTeams(TeamList& /* _return */) {
    return;
  }
};


class DBWorker_ping_args {
 public:

  DBWorker_ping_args() {
  }

  virtual ~DBWorker_ping_args() throw() {}


  bool operator == (const DBWorker_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DBWorker_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBWorker_ping_pargs {
 public:


  virtual ~DBWorker_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBWorker_ping_result {
 public:

  DBWorker_ping_result() {
  }

  virtual ~DBWorker_ping_result() throw() {}


  bool operator == (const DBWorker_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DBWorker_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBWorker_ping_presult {
 public:


  virtual ~DBWorker_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DBWorker_allTeams_args {
 public:

  DBWorker_allTeams_args() {
  }

  virtual ~DBWorker_allTeams_args() throw() {}


  bool operator == (const DBWorker_allTeams_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DBWorker_allTeams_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_allTeams_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DBWorker_allTeams_pargs {
 public:


  virtual ~DBWorker_allTeams_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBWorker_allTeams_result__isset {
  _DBWorker_allTeams_result__isset() : success(false) {}
  bool success;
} _DBWorker_allTeams_result__isset;

class DBWorker_allTeams_result {
 public:

  DBWorker_allTeams_result() {
  }

  virtual ~DBWorker_allTeams_result() throw() {}

  TeamList success;

  _DBWorker_allTeams_result__isset __isset;

  void __set_success(const TeamList& val) {
    success = val;
  }

  bool operator == (const DBWorker_allTeams_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DBWorker_allTeams_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DBWorker_allTeams_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DBWorker_allTeams_presult__isset {
  _DBWorker_allTeams_presult__isset() : success(false) {}
  bool success;
} _DBWorker_allTeams_presult__isset;

class DBWorker_allTeams_presult {
 public:


  virtual ~DBWorker_allTeams_presult() throw() {}

  TeamList* success;

  _DBWorker_allTeams_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DBWorkerClient : virtual public DBWorkerIf {
 public:
  DBWorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DBWorkerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void allTeams(TeamList& _return);
  void send_allTeams();
  void recv_allTeams(TeamList& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DBWorkerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DBWorkerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DBWorkerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_allTeams(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DBWorkerProcessor(boost::shared_ptr<DBWorkerIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &DBWorkerProcessor::process_ping;
    processMap_["allTeams"] = &DBWorkerProcessor::process_allTeams;
  }

  virtual ~DBWorkerProcessor() {}
};

class DBWorkerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DBWorkerProcessorFactory(const ::boost::shared_ptr< DBWorkerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DBWorkerIfFactory > handlerFactory_;
};

class DBWorkerMultiface : virtual public DBWorkerIf {
 public:
  DBWorkerMultiface(std::vector<boost::shared_ptr<DBWorkerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DBWorkerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DBWorkerIf> > ifaces_;
  DBWorkerMultiface() {}
  void add(boost::shared_ptr<DBWorkerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void allTeams(TeamList& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->allTeams(_return);
    }
    ifaces_[i]->allTeams(_return);
    return;
  }

};

} // namespace

#endif
