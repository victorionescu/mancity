/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef mancity_TYPES_H
#define mancity_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace mancity {

typedef std::vector<class Team>  TeamList;


class Team {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  Team() : teamName() {
  }

  virtual ~Team() throw() {}

  std::string teamName;

  void __set_teamName(const std::string& val) {
    teamName = val;
  }

  bool operator == (const Team & rhs) const
  {
    if (!(teamName == rhs.teamName))
      return false;
    return true;
  }
  bool operator != (const Team &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Team & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Team &a, Team &b);

} // namespace

#endif
