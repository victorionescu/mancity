<?php
namespace mancity;

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Exception\TApplicationException;


class Team {
  static $_TSPEC;

  public $id = null;
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'Team';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Team');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Player {
  static $_TSPEC;

  public $id = null;
  public $firstName = null;
  public $lastName = null;
  public $shirtNumber = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'firstName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'lastName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'shirtNumber',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['firstName'])) {
        $this->firstName = $vals['firstName'];
      }
      if (isset($vals['lastName'])) {
        $this->lastName = $vals['lastName'];
      }
      if (isset($vals['shirtNumber'])) {
        $this->shirtNumber = $vals['shirtNumber'];
      }
    }
  }

  public function getName() {
    return 'Player';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->firstName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->shirtNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Player');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->firstName !== null) {
      $xfer += $output->writeFieldBegin('firstName', TType::STRING, 2);
      $xfer += $output->writeString($this->firstName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastName !== null) {
      $xfer += $output->writeFieldBegin('lastName', TType::STRING, 3);
      $xfer += $output->writeString($this->lastName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->shirtNumber !== null) {
      $xfer += $output->writeFieldBegin('shirtNumber', TType::I32, 4);
      $xfer += $output->writeI32($this->shirtNumber);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Match {
  static $_TSPEC;

  public $id = null;
  public $homeId = null;
  public $awayId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'homeId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'awayId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['homeId'])) {
        $this->homeId = $vals['homeId'];
      }
      if (isset($vals['awayId'])) {
        $this->awayId = $vals['awayId'];
      }
    }
  }

  public function getName() {
    return 'Match';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->homeId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->awayId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Match');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->homeId !== null) {
      $xfer += $output->writeFieldBegin('homeId', TType::I32, 2);
      $xfer += $output->writeI32($this->homeId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->awayId !== null) {
      $xfer += $output->writeFieldBegin('awayId', TType::I32, 3);
      $xfer += $output->writeI32($this->awayId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Event {
  static $_TSPEC;

  public $id = null;
  public $eventType = null;
  public $teamId = null;
  public $playerId = null;
  public $outcome = null;
  public $startX = null;
  public $startY = null;
  public $endX = null;
  public $endY = null;
  public $goalY = null;
  public $goalZ = null;
  public $cross = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'eventType',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'teamId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'playerId',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'outcome',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'startX',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'startY',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'endX',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'endY',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'goalY',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'goalZ',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'cross',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['eventType'])) {
        $this->eventType = $vals['eventType'];
      }
      if (isset($vals['teamId'])) {
        $this->teamId = $vals['teamId'];
      }
      if (isset($vals['playerId'])) {
        $this->playerId = $vals['playerId'];
      }
      if (isset($vals['outcome'])) {
        $this->outcome = $vals['outcome'];
      }
      if (isset($vals['startX'])) {
        $this->startX = $vals['startX'];
      }
      if (isset($vals['startY'])) {
        $this->startY = $vals['startY'];
      }
      if (isset($vals['endX'])) {
        $this->endX = $vals['endX'];
      }
      if (isset($vals['endY'])) {
        $this->endY = $vals['endY'];
      }
      if (isset($vals['goalY'])) {
        $this->goalY = $vals['goalY'];
      }
      if (isset($vals['goalZ'])) {
        $this->goalZ = $vals['goalZ'];
      }
      if (isset($vals['cross'])) {
        $this->cross = $vals['cross'];
      }
    }
  }

  public function getName() {
    return 'Event';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eventType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->teamId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->playerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->outcome);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->startX);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->startY);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->endX);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->endY);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->goalY);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->goalZ);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cross);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Event');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eventType !== null) {
      $xfer += $output->writeFieldBegin('eventType', TType::I32, 2);
      $xfer += $output->writeI32($this->eventType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->teamId !== null) {
      $xfer += $output->writeFieldBegin('teamId', TType::I32, 3);
      $xfer += $output->writeI32($this->teamId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->playerId !== null) {
      $xfer += $output->writeFieldBegin('playerId', TType::I32, 4);
      $xfer += $output->writeI32($this->playerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->outcome !== null) {
      $xfer += $output->writeFieldBegin('outcome', TType::I32, 5);
      $xfer += $output->writeI32($this->outcome);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startX !== null) {
      $xfer += $output->writeFieldBegin('startX', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->startX);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startY !== null) {
      $xfer += $output->writeFieldBegin('startY', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->startY);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endX !== null) {
      $xfer += $output->writeFieldBegin('endX', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->endX);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endY !== null) {
      $xfer += $output->writeFieldBegin('endY', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->endY);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goalY !== null) {
      $xfer += $output->writeFieldBegin('goalY', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->goalY);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goalZ !== null) {
      $xfer += $output->writeFieldBegin('goalZ', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->goalZ);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cross !== null) {
      $xfer += $output->writeFieldBegin('cross', TType::I32, 12);
      $xfer += $output->writeI32($this->cross);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


